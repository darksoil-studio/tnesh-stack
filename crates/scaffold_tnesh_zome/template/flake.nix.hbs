{
  description = "Template for Holochain app development";

  inputs = {
    holonix.url = "github:holochain/holonix/main-0.4";

    nixpkgs.follows = "holonix/nixpkgs";
    flake-parts.follows = "holonix/flake-parts";

    tnesh-stack.url = "github:darksoil-studio/tnesh-stack/main-0.4";
    playground.url = "github:darksoil-studio/holochain-playground/main-0.4";

    profiles-zome.url = "github:darksoil-studio/profiles-zome/main-0.4";
  };

  nixConfig = {
    extra-substituters = [
      "https://holochain-ci.cachix.org"
      "https://darksoil-studio.cachix.org"
    ];
    extra-trusted-public-keys = [
      "holochain-ci.cachix.org-1:5IUSkZc0aoRS53rfkvH9Kid40NpyjwCMCzwRTXy+QN8="
      "darksoil-studio.cachix.org-1:UEi+aujy44s41XL/pscLw37KEVpTEIn8N/kn7jO8rkc="
    ];
  };

  outputs = inputs:
    inputs.flake-parts.lib.mkFlake
      {
        inherit inputs;
      }
      {
        imports = [
          ./zomes/integrity/{{snake_case zome_name}}/zome.nix
          ./zomes/coordinator/{{snake_case zome_name}}/zome.nix
          # Just for testing purposes
          ./workdir/dna.nix
          ./workdir/happ.nix
        ];
      
        systems = builtins.attrNames inputs.holonix.devShells;
        perSystem =
          { inputs'
          , config
          , pkgs
          , system
          , ...
          }: {
            devShells.default = pkgs.mkShell {
              inputsFrom = [ 
                (inputs'.holonix.packages.holochain.override {
                  cargoExtraArgs = " --features unstable-functions";
                })
                inputs'.tnesh-stack.devShells.synchronized-pnpm
                inputs'.holonix.devShells.default
              ];

              packages = [
                inputs'.tnesh-stack.packages.hc-scaffold-zome
                inputs'.playground.packages.hc-playground
              ];
            };

            packages.scaffold = pkgs.symlinkJoin {
              name = "scaffold-remote-zome";
              paths = [ inputs'.tnesh-stack.packages.scaffold-remote-zome ];
              buildInputs = [ pkgs.makeWrapper ];
              postBuild = ''
                wrapProgram $out/bin/scaffold-remote-zome \
                  --add-flags "{{kebab_case zome_name}}-zome \
                    --integrity-zome-name {{snake_case zome_name}}_integrity \
                    --coordinator-zome-name {{snake_case zome_name}} \
                    --remote-zome-git-url github:{{github_organization}}/{{kebab_case zome_name}}-zome \
                    --remote-npm-package-name @{{npm_organization}}/{{kebab_case zome_name}}-zome \
                    --remote-npm-package-path ui \
                    --remote-zome-git-branch main-0.4 \
                    --context-element {{kebab_case zome_name}}-context \
                    --context-element-import @{{npm_organization}}/{{kebab_case zome_name}}-zome/dist/elements/{{kebab_case zome_name}}-context.js" 
              '';
            };
          };
      };
}
