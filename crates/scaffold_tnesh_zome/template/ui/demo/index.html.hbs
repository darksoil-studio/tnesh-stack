<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="Description" content="Put your description here." />
    <base href="/" />
    
    <style>
      html,
      body {
        margin: 0;
        padding: 0;
        font-family: sans-serif;
        background-color: #ededed;
        height: 100%;
        width: 100%;
      }
      
      body {
        display: flex;
      }

    </style>
    <title>{{title_case zome_name}}</title>
  </head>

  <body>
    <demo-app></demo-app>

    <script type="module">
import '@shoelace-style/shoelace/dist/themes/light.css';
import { ContextProvider } from '@lit/context';
import { LitElement, css, html } from 'lit';
import { AppWebsocket } from '@holochain/client';
import { sharedStyles } from '@tnesh-stack/elements';
import { SignalWatcher } from '@tnesh-stack/signals';
import '@tnesh-stack/elements/dist/elements/display-error.js';
import '@darksoil-studio/profiles-zome/dist/elements/profile-prompt.js';
import '@shoelace-style/shoelace/dist/components/spinner/spinner.js';

import '../src/elements/{{kebab_case zome_name}}-context.ts';

export class DemoApp extends SignalWatcher(LitElement) {

  constructor() {
    super();
    this._loading = true;
    this._view = { view: 'main' };
  }

  async firstUpdated() {
    this._client = await AppWebsocket.connect();

    this._loading = false;
    this.requestUpdate();
  }

  renderContent() {
    return html`
      <!-- TODO: add here the content of your application -->
    `;
  }

  render() {
    if (this._loading)
      return html`<div
        class="row"
        style="flex: 1; height: 100%; align-items: center; justify-content: center;"
      >
        <sl-spinner></sl-spinner>
      </div>`;

    return html`
      <app-client-context .client=${this._client}>
        <{{kebab_case zome_name}}-context role="{{snake_case zome_name}}_test">
          <div class="fill row" style="width: 100vw; height: 100%;">
            <profile-prompt style="flex: 1;">
              ${this.renderContent()}
            </profile-prompt>
          </div>
        </{{kebab_case zome_name}}-context>
      </app-client-context>
    `;
  }

  static styles = [
    css`
      :host {
        display: flex;
        flex: 1;
      }
    `,
    sharedStyles,
  ];
}
      
      customElements.define('demo-app', DemoApp);
    </script>
  </body>
</html>
